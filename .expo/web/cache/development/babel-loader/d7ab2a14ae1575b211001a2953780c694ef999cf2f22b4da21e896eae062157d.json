{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isHovered = _useState2[0],\n    setIsHovered = _useState2[1];\n  var handlePressIn = function handlePressIn() {\n    setIsHovered(true);\n  };\n  var handlePressOut = function handlePressOut() {\n    setIsHovered(false);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Open up App.js to start working on your app!\"\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(Button, {\n      title: \"Press Me\",\n      style: \"blue\"\n    }), _jsx(TouchableOpacity, {\n      style: [styles.button, isHovered && styles.buttonHovered],\n      onPressIn: handlePressIn,\n      onPressOut: handlePressOut,\n      children: _jsx(Text, {\n        style: [styles.buttonText, isHovered && styles.buttonTextHovered],\n        children: \"Hover Me\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    backgroundColor: '#3498db',\n    padding: 10,\n    borderRadius: 5\n  },\n  buttonHovered: {\n    backgroundColor: '#2980b9'\n  },\n  buttonText: {\n    color: 'white',\n    textAlign: 'center'\n  },\n  buttonTextHovered: {\n    color: 'yellow'\n  }\n});","map":{"version":3,"names":["useState","StatusBar","Button","StyleSheet","Text","View","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","isHovered","setIsHovered","handlePressIn","handlePressOut","style","styles","container","children","title","button","buttonHovered","onPressIn","onPressOut","buttonText","buttonTextHovered","create","flex","backgroundColor","alignItems","justifyContent","padding","borderRadius","color","textAlign"],"sources":["D:/Project/ReactNative Project/ReactiveNative_OTT_APP/App.js"],"sourcesContent":["import {useState} from 'react'\nimport { StatusBar } from 'expo-status-bar';\nimport { Button, StyleSheet, Text, View,TouchableOpacity } from 'react-native';\n\nexport default function App() {\n\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handlePressIn = () => {\n    setIsHovered(true);\n  };\n\n  const handlePressOut = () => {\n    setIsHovered(false);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n      <Button  title=\"Press Me\" style=\"blue\"/>\n\n      <TouchableOpacity\n      style={[styles.button, isHovered && styles.buttonHovered]}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n    >\n      <Text style={[styles.buttonText, isHovered && styles.buttonTextHovered]}>Hover Me</Text>\n    </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n   button: {\n    backgroundColor: '#3498db',\n    padding: 10,\n    borderRadius: 5,\n  },\n  buttonHovered: {\n    backgroundColor: '#2980b9',\n  },\n  buttonText: {\n    color: 'white',\n    textAlign: 'center',\n  },\n  buttonTextHovered: {\n    color: 'yellow', // Change this to your desired text color for hover effect\n  },\n  // button:{\n  //   color: blue,\n  //   backgroundColor: '#3498db',\n  //   padding: 10,\n  //   borderRadius: 5,\n\n  // },\n\n});\n"],"mappings":";AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAASC,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,gBAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAG5C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAG5B,IAAAC,SAAA,GAAkCZ,QAAQ,CAAC,KAAK,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA1CG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAE9B,IAAMI,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IAC1BD,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,IAAME,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAC3BF,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,OACEN,KAAA,CAACL,IAAI;IAACc,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5Bd,IAAA,CAACJ,IAAI;MAAAkB,QAAA,EAAC;IAA4C,CAAM,CAAC,EACzDd,IAAA,CAACP,SAAS;MAACkB,KAAK,EAAC;IAAM,CAAE,CAAC,EAC1BX,IAAA,CAACN,MAAM;MAAEqB,KAAK,EAAC,UAAU;MAACJ,KAAK,EAAC;IAAM,CAAC,CAAC,EAExCX,IAAA,CAACF,gBAAgB;MACjBa,KAAK,EAAE,CAACC,MAAM,CAACI,MAAM,EAAET,SAAS,IAAIK,MAAM,CAACK,aAAa,CAAE;MAC1DC,SAAS,EAAET,aAAc;MACzBU,UAAU,EAAET,cAAe;MAAAI,QAAA,EAE3Bd,IAAA,CAACJ,IAAI;QAACe,KAAK,EAAE,CAACC,MAAM,CAACQ,UAAU,EAAEb,SAAS,IAAIK,MAAM,CAACS,iBAAiB,CAAE;QAAAP,QAAA,EAAC;MAAQ,CAAM;IAAC,CACxE,CAAC;EAAA,CACb,CAAC;AAEX;AAEA,IAAMF,MAAM,GAAGjB,UAAU,CAAC2B,MAAM,CAAC;EAC/BT,SAAS,EAAE;IACTU,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACAV,MAAM,EAAE;IACPQ,eAAe,EAAE,SAAS;IAC1BG,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE;EAChB,CAAC;EACDX,aAAa,EAAE;IACbO,eAAe,EAAE;EACnB,CAAC;EACDJ,UAAU,EAAE;IACVS,KAAK,EAAE,OAAO;IACdC,SAAS,EAAE;EACb,CAAC;EACDT,iBAAiB,EAAE;IACjBQ,KAAK,EAAE;EACT;AASF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
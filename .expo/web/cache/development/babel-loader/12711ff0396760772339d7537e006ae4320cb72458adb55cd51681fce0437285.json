{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar OtpVerifyScreen = function OtpVerifyScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    otp = _useState2[0],\n    setOtp = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var otpInputRefs = useRef([]);\n  var handleOtpChange = function handleOtpChange(index, value) {\n    var newOtp = otp.split('');\n    newOtp[index] = value;\n    setOtp(newOtp.join(''));\n    if (index < otpInputRefs.current.length - 1 && value !== '') {\n      otpInputRefs.current[index + 1].focus();\n    }\n  };\n  var handleVerifyOtp = function handleVerifyOtp() {\n    setIsLoading(true);\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 2000);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.headerText,\n      children: \"Verify OTP\"\n    }), _jsx(View, {\n      style: styles.otpContainer,\n      children: Array.from({\n        length: 4\n      }).map(function (_, index) {\n        return _jsx(TextInput, {\n          style: styles.otpInput,\n          value: otp[index] || '',\n          onChangeText: function onChangeText(value) {\n            return handleOtpChange(index, value);\n          },\n          maxLength: 1,\n          keyboardType: \"numeric\",\n          ref: function ref(input) {\n            return otpInputRefs.current[index] = input;\n          }\n        }, index);\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.verifyButton,\n      onPress: handleVerifyOtp,\n      children: isLoading ? _jsx(ActivityIndicator, {\n        size: \"small\",\n        color: \"white\"\n      }) : _jsx(Text, {\n        style: styles.verifyButtonText,\n        children: \"Verify OTP\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#f7f7f7',\n    padding: 20\n  },\n  headerText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 30\n  },\n  otpContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 30\n  },\n  otpInput: {\n    width: 60,\n    height: 60,\n    fontSize: 24,\n    borderColor: '#ccc',\n    borderWidth: 1,\n    borderRadius: 10,\n    textAlign: 'center'\n  },\n  verifyButton: {\n    backgroundColor: 'green',\n    paddingVertical: 15,\n    paddingHorizontal: 40,\n    borderRadius: 10\n  },\n  verifyButtonText: {\n    fontSize: 18,\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});\nexport default OtpVerifyScreen;","map":{"version":3,"names":["React","useState","useRef","View","Text","TextInput","TouchableOpacity","ActivityIndicator","StyleSheet","jsx","_jsx","jsxs","_jsxs","OtpVerifyScreen","_useState","_useState2","_slicedToArray","otp","setOtp","_useState3","_useState4","isLoading","setIsLoading","otpInputRefs","handleOtpChange","index","value","newOtp","split","join","current","length","focus","handleVerifyOtp","setTimeout","style","styles","container","children","headerText","otpContainer","Array","from","map","_","otpInput","onChangeText","maxLength","keyboardType","ref","input","verifyButton","onPress","size","color","verifyButtonText","create","flex","alignItems","justifyContent","backgroundColor","padding","fontSize","fontWeight","marginBottom","flexDirection","width","height","borderColor","borderWidth","borderRadius","textAlign","paddingVertical","paddingHorizontal"],"sources":["D:/Project/ReactNative Project/ReactiveNative_OTT_APP/src/screens/Auth/OtpVerifyScreen.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, ActivityIndicator, StyleSheet } from 'react-native';\r\n\r\nconst OtpVerifyScreen = () => {\r\n  const [otp, setOtp] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const otpInputRefs = useRef([]);\r\n\r\n  const handleOtpChange = (index, value) => {\r\n    const newOtp = otp.split('');\r\n    newOtp[index] = value;\r\n    setOtp(newOtp.join(''));\r\n    if (index < otpInputRefs.current.length - 1 && value !== '') {\r\n      otpInputRefs.current[index + 1].focus();\r\n    }\r\n  };\r\n\r\n  const handleVerifyOtp = () => {\r\n    // Simulating OTP verification process with a timeout\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n      // Handle OTP verification logic here\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.headerText}>Verify OTP</Text>\r\n\r\n      <View style={styles.otpContainer}>\r\n        {Array.from({ length: 4 }).map((_, index) => (\r\n          <TextInput\r\n            key={index}\r\n            style={styles.otpInput}\r\n            value={otp[index] || ''}\r\n            onChangeText={(value) => handleOtpChange(index, value)}\r\n            maxLength={1}\r\n            keyboardType=\"numeric\"\r\n            ref={(input) => (otpInputRefs.current[index] = input)}\r\n          />\r\n        ))}\r\n      </View>\r\n\r\n      <TouchableOpacity style={styles.verifyButton} onPress={handleVerifyOtp}>\r\n        {isLoading ? (\r\n          <ActivityIndicator size=\"small\" color=\"white\" />\r\n        ) : (\r\n          <Text style={styles.verifyButtonText}>Verify OTP</Text>\r\n        )}\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#f7f7f7',\r\n    padding: 20,\r\n  },\r\n  headerText: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 30,\r\n  },\r\n  otpContainer: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    marginBottom: 30,\r\n  },\r\n  otpInput: {\r\n    width: 60,\r\n    height: 60,\r\n    fontSize: 24,\r\n    borderColor: '#ccc',\r\n    borderWidth: 1,\r\n    borderRadius: 10,\r\n    textAlign: 'center',\r\n  },\r\n  verifyButton: {\r\n    backgroundColor: 'green',\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 40,\r\n    borderRadius: 10,\r\n  },\r\n  verifyButtonText: {\r\n    fontSize: 18,\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default OtpVerifyScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
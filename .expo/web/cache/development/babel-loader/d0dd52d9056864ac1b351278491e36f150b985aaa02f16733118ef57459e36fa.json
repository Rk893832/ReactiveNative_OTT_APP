{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { LineChart } from 'react-native-chart-kit';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isHovered = _useState2[0],\n    setIsHovered = _useState2[1];\n  var handlePressIn = function handlePressIn() {\n    setIsHovered(true);\n  };\n  var handlePressOut = function handlePressOut() {\n    setIsHovered(false);\n  };\n  var data = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n    datasets: [{\n      data: [20, 45, 28, 80, 99, 43],\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `rgba(0, 0, 0, ${opacity})`;\n      },\n      strokeWidth: 2\n    }]\n  };\n  var chartConfig = {\n    backgroundGradientFrom: '#fff',\n    backgroundGradientTo: '#fff',\n    decimalPlaces: 0,\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return `rgba(0, 0, 0, ${opacity})`;\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      children: \"Open up App.js to start working on your app!\"\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(Button, {\n      title: \"Press Me\",\n      style: \"blue\"\n    }), _jsx(TouchableOpacity, {\n      style: [styles.button, isHovered && styles.buttonHovered],\n      onPressIn: handlePressIn,\n      onPressOut: handlePressOut,\n      children: _jsx(Text, {\n        style: [styles.buttonText, isHovered && styles.buttonTextHovered],\n        children: \"Hover Me\"\n      })\n    }), _jsx(LineChart, {\n      data: data,\n      width: 350,\n      height: 220,\n      chartConfig: chartConfig\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    backgroundColor: '#3498db',\n    padding: 10,\n    borderRadius: 5\n  },\n  buttonHovered: {\n    backgroundColor: '#2980b9'\n  },\n  buttonText: {\n    color: 'white',\n    textAlign: 'center'\n  },\n  buttonTextHovered: {\n    color: 'yellow'\n  }\n});","map":{"version":3,"names":["useState","StatusBar","Button","StyleSheet","Text","View","TouchableOpacity","LineChart","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","isHovered","setIsHovered","handlePressIn","handlePressOut","data","labels","datasets","color","opacity","arguments","length","undefined","strokeWidth","chartConfig","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","style","styles","container","children","title","button","buttonHovered","onPressIn","onPressOut","buttonText","buttonTextHovered","width","height","create","flex","backgroundColor","alignItems","justifyContent","padding","borderRadius","textAlign"],"sources":["D:/Project/ReactNative Project/ReactiveNative_OTT_APP/App.js"],"sourcesContent":["import {useState} from 'react'\nimport { StatusBar } from 'expo-status-bar';\nimport { Button, StyleSheet, Text, View,TouchableOpacity } from 'react-native';\nimport { LineChart } from 'react-native-chart-kit';\n\n\nexport default function App() {\n\n\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handlePressIn = () => {\n    setIsHovered(true);\n  };\n\n  const handlePressOut = () => {\n    setIsHovered(false);\n  };\n\n  const data = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n    datasets: [\n      {\n        data: [20, 45, 28, 80, 99, 43],\n        color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`, // Adjust line color\n        strokeWidth: 2, // Adjust line width\n      },\n    ],\n  };\n  \n  const chartConfig = {\n    backgroundGradientFrom: '#fff',\n    backgroundGradientTo: '#fff',\n    decimalPlaces: 0, // Number of decimal places for labels\n    color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style=\"auto\" />\n      <Button  title=\"Press Me\" style=\"blue\"/>\n\n      <TouchableOpacity\n      style={[styles.button, isHovered && styles.buttonHovered]}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n    >\n      <Text style={[styles.buttonText, isHovered && styles.buttonTextHovered]}>Hover Me</Text>\n    </TouchableOpacity>\n\n    <LineChart\n        data={data}\n        width={350}\n        height={220}\n        chartConfig={chartConfig}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n   button: {\n    backgroundColor: '#3498db',\n    padding: 10,\n    borderRadius: 5,\n  },\n  buttonHovered: {\n    backgroundColor: '#2980b9',\n  },\n  buttonText: {\n    color: 'white',\n    textAlign: 'center',\n  },\n  buttonTextHovered: {\n    color: 'yellow', // Change this to your desired text color for hover effect\n  },\n  // button:{\n  //   color: blue,\n  //   backgroundColor: '#3498db',\n  //   padding: 10,\n  //   borderRadius: 5,\n\n  // },\n\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatScreen = function ChatScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newMessage = _useState4[0],\n    setNewMessage = _useState4[1];\n  var handleSendMessage = function handleSendMessage() {\n    if (newMessage.trim() === '') return;\n    setMessages([].concat(_toConsumableArray(messages), [{\n      id: messages.length,\n      text: newMessage,\n      sender: 'user'\n    }]));\n    setNewMessage('');\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      data: messages,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(View, {\n          style: item.sender === 'user' ? styles.userMessageContainer : styles.otherMessageContainer,\n          children: _jsx(Text, {\n            style: styles.messageText,\n            children: item.text\n          })\n        });\n      }\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        value: newMessage,\n        onChangeText: function onChangeText(text) {\n          return setNewMessage(text);\n        },\n        placeholder: \"Type your message...\"\n      }), _jsx(TouchableOpacity, {\n        style: styles.sendButton,\n        onPress: handleSendMessage,\n        children: _jsx(Text, {\n          style: styles.sendButtonText,\n          children: \"Send\"\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 16\n  },\n  userMessageContainer: {\n    backgroundColor: '#DCF8C5',\n    alignSelf: 'flex-end',\n    borderRadius: 8,\n    padding: 8,\n    marginVertical: 4\n  },\n  otherMessageContainer: {\n    backgroundColor: '#E0E0E0',\n    alignSelf: 'flex-start',\n    borderRadius: 8,\n    padding: 8,\n    marginVertical: 4\n  },\n  messageText: {\n    fontSize: 16\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginTop: 16\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 20,\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  sendButton: {\n    marginLeft: 8,\n    backgroundColor: '#007BFF',\n    borderRadius: 20,\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  sendButtonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  }\n});\nexport default ChatScreen;","map":{"version":3,"names":["React","useState","View","Text","FlatList","TextInput","TouchableOpacity","StyleSheet","jsx","_jsx","jsxs","_jsxs","ChatScreen","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","newMessage","setNewMessage","handleSendMessage","trim","concat","_toConsumableArray","id","length","text","sender","style","styles","container","children","data","keyExtractor","item","toString","renderItem","_ref","userMessageContainer","otherMessageContainer","messageText","inputContainer","input","value","onChangeText","placeholder","sendButton","onPress","sendButtonText","create","flex","justifyContent","padding","backgroundColor","alignSelf","borderRadius","marginVertical","fontSize","flexDirection","alignItems","marginTop","borderWidth","borderColor","paddingVertical","paddingHorizontal","marginLeft","color","fontWeight"],"sources":["D:/Project/ReactNative Project/ReactiveNative_OTT_APP/src/screens/Chat/ChatScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, FlatList, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\n\r\nconst ChatScreen = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n\r\n  const handleSendMessage = () => {\r\n    if (newMessage.trim() === '') return;\r\n\r\n    setMessages([...messages, { id: messages.length, text: newMessage, sender: 'user' }]);\r\n    setNewMessage('');\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <FlatList\r\n        data={messages}\r\n        keyExtractor={(item) => item.id.toString()}\r\n        renderItem={({ item }) => (\r\n          <View style={item.sender === 'user' ? styles.userMessageContainer : styles.otherMessageContainer}>\r\n            <Text style={styles.messageText}>{item.text}</Text>\r\n          </View>\r\n        )}\r\n      />\r\n      <View style={styles.inputContainer}>\r\n        <TextInput\r\n          style={styles.input}\r\n          value={newMessage}\r\n          onChangeText={(text) => setNewMessage(text)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <TouchableOpacity style={styles.sendButton} onPress={handleSendMessage}>\r\n          <Text style={styles.sendButtonText}>Send</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    padding: 16,\r\n  },\r\n  userMessageContainer: {\r\n    backgroundColor: '#DCF8C5',\r\n    alignSelf: 'flex-end',\r\n    borderRadius: 8,\r\n    padding: 8,\r\n    marginVertical: 4,\r\n  },\r\n  otherMessageContainer: {\r\n    backgroundColor: '#E0E0E0',\r\n    alignSelf: 'flex-start',\r\n    borderRadius: 8,\r\n    padding: 8,\r\n    marginVertical: 4,\r\n  },\r\n  messageText: {\r\n    fontSize: 16,\r\n  },\r\n  inputContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginTop: 16,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 20,\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 16,\r\n  },\r\n  sendButton: {\r\n    marginLeft: 8,\r\n    backgroundColor: '#007BFF',\r\n    borderRadius: 20,\r\n    paddingVertical: 8,\r\n    paddingHorizontal: 16,\r\n  },\r\n  sendButtonText: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n  },\r\n});\r\n\r\nexport default ChatScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChangePasswordScreen = function ChangePasswordScreen() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentPassword = _useState2[0],\n    setCurrentPassword = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newPassword = _useState4[0],\n    setNewPassword = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    confirmNewPassword = _useState6[0],\n    setConfirmNewPassword = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isLoading = _useState8[0],\n    setIsLoading = _useState8[1];\n  var handleChangePassword = function handleChangePassword() {\n    setIsLoading(true);\n    setTimeout(function () {\n      setIsLoading(false);\n    }, 2000);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.headerText,\n      children: \"Change Password\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Current Password\",\n      secureTextEntry: true,\n      value: currentPassword,\n      onChangeText: setCurrentPassword\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"New Password\",\n      secureTextEntry: true,\n      value: newPassword,\n      onChangeText: setNewPassword\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Confirm New Password\",\n      secureTextEntry: true,\n      value: confirmNewPassword,\n      onChangeText: setConfirmNewPassword\n    }), _jsxs(TouchableOpacity, {\n      style: styles.changeButton,\n      onPress: handleChangePassword,\n      children: [_jsx(Text, {\n        style: styles.changeButtonText,\n        children: \"Change Password\"\n      }), isLoading ? _jsxs(_Fragment, {\n        children: [_jsx(ActivityIndicator, {\n          size: \"large\",\n          color: \"white\"\n        }), _jsx(Text, {\n          style: styles.loader,\n          children: \"Loading...\"\n        })]\n      }) : _jsx(Text, {\n        style: styles.changeButtonText,\n        children: \"Change Password\"\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f7f7f7',\n    padding: 20\n  },\n  headerText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20\n  },\n  input: {\n    height: 50,\n    backgroundColor: 'white',\n    borderRadius: 10,\n    paddingHorizontal: 15,\n    marginBottom: 20\n  },\n  changeButton: {\n    backgroundColor: 'green',\n    paddingVertical: 15,\n    borderRadius: 10\n  },\n  changeButtonText: {\n    fontSize: 18,\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  }\n});\nexport default ChangePasswordScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ChangePasswordScreen","_useState","_useState2","_slicedToArray","currentPassword","setCurrentPassword","_useState3","_useState4","newPassword","setNewPassword","_useState5","_useState6","confirmNewPassword","setConfirmNewPassword","_useState7","_useState8","isLoading","setIsLoading","handleChangePassword","setTimeout","style","styles","container","children","headerText","input","placeholder","secureTextEntry","value","onChangeText","changeButton","onPress","changeButtonText","ActivityIndicator","size","color","loader","create","flex","backgroundColor","padding","fontSize","fontWeight","marginBottom","height","borderRadius","paddingHorizontal","paddingVertical","textAlign"],"sources":["D:/Project/ReactNative Project/ReactiveNative_OTT_APP/src/screens/Setting/ChangePasswordScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';\r\n\r\nconst ChangePasswordScreen = () => {\r\n    \r\n  const [currentPassword, setCurrentPassword] = useState('');\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleChangePassword = () => {\r\n    // Simulating the password change process with a timeout\r\n    setIsLoading(true);\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n      // Handle password change logic here\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.headerText}>Change Password</Text>\r\n\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Current Password\"\r\n        secureTextEntry\r\n        value={currentPassword}\r\n        onChangeText={setCurrentPassword}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"New Password\"\r\n        secureTextEntry\r\n        value={newPassword}\r\n        onChangeText={setNewPassword}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Confirm New Password\"\r\n        secureTextEntry\r\n        value={confirmNewPassword}\r\n        onChangeText={setConfirmNewPassword}\r\n      />\r\n\r\n      <TouchableOpacity style={styles.changeButton} onPress={handleChangePassword}>\r\n        <Text style={styles.changeButtonText}>Change Password</Text>\r\n\r\n        {isLoading ? (\r\n            <>\r\n              <ActivityIndicator  size=\"large\"  color=\"white\" />\r\n          <Text style={styles.loader}>Loading...</Text>\r\n            </>\r\n        ) : (\r\n          <Text style={styles.changeButtonText}>Change Password</Text>\r\n        )}\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#f7f7f7',\r\n    padding: 20,\r\n  },\r\n  headerText: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n    marginBottom: 20,\r\n  },\r\n  input: {\r\n    height: 50,\r\n    backgroundColor: 'white',\r\n    borderRadius: 10,\r\n    paddingHorizontal: 15,\r\n    marginBottom: 20,\r\n  },\r\n  changeButton: {\r\n    backgroundColor: 'green',\r\n    paddingVertical: 15,\r\n    borderRadius: 10,\r\n  },\r\n  changeButtonText: {\r\n    fontSize: 18,\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default ChangePasswordScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}